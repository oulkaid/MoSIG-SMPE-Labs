#+title: Automating dataframe construction starting from copy/past from a .pdf
#+author: Oussama Oulkaid
#+options: toc:nil

* Starting point
After copying/pasting the table from the .pdf file (*exercise.pdf*) to .txt files (in folder *copied/*), we attach the labels (using "_") so that the delimiter become a single space (" "). 
We also insert a row at the top of the file ; first step to approprieatly read the file.

#+begin_src R :results output append :cache yes :session :eval yes
# Environment
library(tidyverse)
library(ggplot2)
library(readr)
#+end_src 

* Build the Dataframe from file
#+begin_src R :exports both :results output :cache yes :session :eval yes :message false :echo true
Group1 <- read_delim("copied/DATA1_copyPast.txt",delim ="\n")
Group2 <- read_delim("copied/DATA2_copyPast.txt",delim ="\n")
#+end_src 

* Arrange the Dataframe
We want to build a dataframe with the following format: 

| group_Id | score_PS | score_MS | score_GS |
| <dbl>    | <dbl>    | <dbl>    | <dbl>    |
|          |          |          |          |

Where:
+ petite section : *PS*
+ moyenne section : *MS*
+ grande section : *GS*

#+begin_src R :results output append :cache yes :session :eval yes
# GROUP 1

PS_1_indexes <- seq(1,nrow(Group1),3)
MS_1_indexes <- seq(2,nrow(Group1),3)
GS_1_indexes <- seq(3,nrow(Group1),3)

PS_1 <- strsplit( data.frame(x=Group1[PS_1_indexes,])[,] , " " )
MS_1 <- strsplit( data.frame(x=Group1[MS_1_indexes,])[,] , " " )
GS_1 <- strsplit( data.frame(x=Group1[GS_1_indexes,])[,] , " " )

df_Id_1 <- data.frame(matrix(unlist(1), nrow=33, byrow=TRUE))
df_PS_1 <- data.frame(matrix(unlist(PS_1), nrow=33+1, byrow=TRUE))
df_MS_1 <- data.frame(matrix(unlist(MS_1), nrow=33+1, byrow=TRUE))
df_GS_1 <- data.frame(matrix(unlist(GS_1), nrow=33+1, byrow=TRUE))

names(df_Id_1)[1] <- "group_Id"
names(df_PS_1)[1] <- "score_PS"
names(df_MS_1)[1] <- "score_MS"
names(df_GS_1)[1] <- "score_GS"

df_PS_1 <- subset(df_PS_1,score_PS!="score_in_petite_section")
df_MS_1 <- subset(df_MS_1,score_MS!="score_in_moyenne_section")
df_GS_1 <- subset(df_GS_1,score_GS!="score_in_grande_section")

# GROUP 2

PS_2_indexes <- seq(1,nrow(Group2),3)
MS_2_indexes <- seq(2,nrow(Group2),3)
GS_2_indexes <- seq(3,nrow(Group2),3)

PS_2 <- strsplit( data.frame(x=Group2[PS_2_indexes,])[,] , " " )
MS_2 <- strsplit( data.frame(x=Group2[MS_2_indexes,])[,] , " " )
GS_2 <- strsplit( data.frame(x=Group2[GS_2_indexes,])[,] , " " )

df_Id_2 <- data.frame(matrix(unlist(2), nrow=30, byrow=TRUE))
df_PS_2 <- data.frame(matrix(unlist(PS_2), nrow=30+1, byrow=TRUE))
df_MS_2 <- data.frame(matrix(unlist(MS_2), nrow=30+1, byrow=TRUE))
df_GS_2 <- data.frame(matrix(unlist(GS_2), nrow=30+1, byrow=TRUE))

names(df_Id_2)[1] <- "group_Id"
names(df_PS_2)[1] <- "score_PS"
names(df_MS_2)[1] <- "score_MS"
names(df_GS_2)[1] <- "score_GS"

df_PS_2 <- subset(df_PS_2,score_PS!="score_in_petite_section")
df_MS_2 <- subset(df_MS_2,score_MS!="score_in_moyenne_section")
df_GS_2 <- subset(df_GS_2,score_GS!="score_in_grande_section")

# Constructing the Dataframe 

df_Id <- rbind(df_Id_1, df_Id_2)
df_PS <- rbind(df_PS_1, df_PS_2)
df_MS <- rbind(df_MS_1, df_MS_2)
df_GS <- rbind(df_GS_1, df_GS_2)

df <- cbind(df_Id, df_PS, df_MS, df_GS)

df <- apply(apply(df, 2, gsub, patt=",", replace="."), 2, as.numeric)

df <- transform( df, score_PS = as.numeric(as.character(score_PS)), score_MS = as.numeric(as.character(score_MS)), 
                 score_GS = as.numeric(as.character(score_GS)) )
#+end_src

** The resulting dataframe:
#+begin_src R :exports both :results output :cache yes :session :eval yes :message false :echo true
df
#+end_src

#+begin_example
   group_Id score_PS score_MS score_GS
1         1     1.36     2.07     7.63
2         1     0.24     3.60     5.79
3         1     0.22     2.57     7.38
4         1     0.11     4.29     8.50
5         1     1.25     5.67     5.75
6         1     0.24     1.67     4.83
7         1     0.35     2.43     5.38
8         1     0.24     4.72     7.75
9         1     1.60     7.67     7.54
10        1     0.63     3.83     8.38
11        1     0.68     5.13     7.50
12        1     0.00     2.31     6.17
13        1     1.44     1.00     5.68
14        1     1.86     3.74     7.25
15        1     3.47     6.64     7.54
16        1     0.58     3.39     5.64
17        1     0.00     2.36     6.46
18        1     0.82     6.75     7.50
19        1     2.75     5.13     8.75
20        1     3.14     8.00     9.00
21        1     1.58     7.08     7.25
22        1     2.83     6.01     7.42
23        1     1.92     6.25     6.58
24        1     0.83     2.61     8.25
25        1     2.47     3.61     7.46
26        1     1.13     2.67     7.21
27        1     1.72     5.24     7.50
28        1     0.61     1.56     8.17
29        1     0.35     1.89     6.96
30        1     1.11     4.06     8.00
31        1     1.24     3.11     6.92
32        1     2.36     4.00     5.71
33        1     0.50     2.89     7.00
34        2     1.57     2.26     4.42
35        2     1.36     3.68     6.63
36        2     1.25     6.26     6.88
37        2     2.81     3.88     7.17
38        2     0.86     6.54     7.00
39        2     0.47     5.25     7.33
40        2     0.35     6.00     7.63
41        2     1.81     6.67     6.54
42        2     1.63     4.96     8.54
43        2     1.36     2.57     5.21
44        2     0.35     1.64     4.46
45        2     1.75     5.83     7.00
46        2     0.35     6.42     6.50
47        2     2.58     6.88     6.00
48        2     1.58     4.46     7.25
49        2     1.67     1.94     5.47
50        2     0.60     5.50     7.63
51        2     1.63     1.71     3.83
52        2     1.06     3.33     4.92
53        2     0.00     2.28     5.96
54        2     2.17     5.67     6.33
55        2     0.25     5.32     7.13
56        2     0.00     1.56     4.61
57        2     2.67     2.32     4.13
58        2     2.33     4.17     7.00
59        2     1.13     6.18     7.25
60        2     1.22     4.32     7.88
61        2     1.33     6.50     8.50
62        2     1.00     3.00     5.21
63        2     0.83     2.67     7.00
#+end_example

** Output to csv file
#+begin_src R :results output append :cache yes :session :eval yes :message false
write_delim(df, file="dataframe.csv", delim=",")
#+end_src
